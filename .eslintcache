[{"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\index.js":"1","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\App.js":"2","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\reportWebVitals.js":"3","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\CreateList\\CreateList.js":"4","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\ListContainer\\ListContainer.js":"5","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\CreateTask\\CreateTask.js":"6","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\TaskCard\\TaskCard.js":"7","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\Header\\Header.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":272,"mtime":1607029206099,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2119,"mtime":1607454140608,"results":"13","hashOfConfig":"10"},{"size":705,"mtime":1607454165333,"results":"14","hashOfConfig":"10"},{"size":2572,"mtime":1607454267082,"results":"15","hashOfConfig":"10"},{"size":2161,"mtime":1607454308758,"results":"16","hashOfConfig":"10"},{"size":217,"mtime":1607256621012,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"101dm6q",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\index.js",[],["37","38"],"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\App.js",[],"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\reportWebVitals.js",[],"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\CreateList\\CreateList.js",["39"],"import {React, useState, useEffect} from 'react'\r\nimport '../CreateList/CreateList.css'\r\nimport ListContainer from '../ListContainer/ListContainer'\r\n\r\nfunction CreateList(){\r\n    \r\n    let [listNameArray, setListNameArray] = useState([]) \r\n    let [newListName, setNewListName] = useState(\"\")\r\n    let listNameCopy = [...listNameArray]\r\n    let [listFormClass, setListFormClass] = useState('hideList')\r\n    let [listFormHidden, setListFormHidden] = useState(false)\r\n    \r\n    /*useEffect(() => {\r\n        const data = localStorage.getItem('Listnames')\r\n        if(data) {\r\n            setListNameArray(JSON.parse(data))\r\n        }\r\n    },  [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('Listnames', JSON.stringify(listNameCopy))\r\n    })*/\r\n\r\n    function showListForm(){\r\n        setListFormHidden(!listFormHidden)\r\n        if(listFormHidden === true) {\r\n            setListFormClass('hideList')\r\n        } else {\r\n            setListFormClass('showList')\r\n        }\r\n    }\r\n    \r\n    function createNewListName(event) {\r\n        setNewListName(event.target.value)\r\n    }\r\n\r\n    function updateListNameArray(event) {\r\n        event.preventDefault()\r\n        let createdIndex = Math.random()*1000\r\n        setListNameArray(previousNameArray => [...previousNameArray, {listName: newListName, index: createdIndex}])\r\n        setNewListName(\"\")\r\n    }\r\n\r\n    function deleteList(index){\r\n        listNameCopy.splice(index, 1)\r\n        setListNameArray(listNameCopy)\r\n    }\r\n\r\n    return( \r\n        <section>\r\n            <div className=\"createNewList__div\">\r\n                <input type=\"submit\" value=\"+\" className=\"createNewList__btn\" onClick={showListForm}/>\r\n                <form className={listFormClass}>\r\n                <input type=\"text\" placeholder=\"Give your list a name\" value={newListName} onChange={createNewListName}/>\r\n                <input type=\"submit\" value=\"Create new list\" onClick={updateListNameArray} />\r\n                </form>\r\n            </div> \r\n            <ListContainer listNames={listNameCopy} handler={deleteList}/>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CreateList","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\ListContainer\\ListContainer.js",[],"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\CreateTask\\CreateTask.js",["40"],"import {React, useState, useEffect} from 'react'\r\nimport '../CreateTask/CreateTask.css'\r\nimport TaskCard from '../TaskCard/TaskCard'\r\n\r\nfunction CreateTask(){\r\n    let [taskName, setTaskName] = useState(\"\")\r\n    let [taskComment, setTaskComment] = useState(\"\")\r\n    let [taskArray, setTaskArray] = useState([])\r\n    let taskArrayCopy = [...taskArray]\r\n    \r\n    function changeTaskName(event){\r\n        setTaskName(event.target.value)\r\n    }\r\n\r\n    function changeTaskComment(event){\r\n        setTaskComment(event.target.value)\r\n    }\r\n\r\n    function addTaskToList(event){\r\n        event.preventDefault()\r\n        let taskIndex = Math.random()*1000\r\n        setTaskArray(prevTaskArray => [...prevTaskArray, {taskName: taskName, taskComment: taskComment, index: taskIndex}])\r\n        setTaskName(\"\")\r\n        setTaskComment(\"\")\r\n    }\r\n    \r\n    function removeTask(index){\r\n        taskArrayCopy.splice(index,1)\r\n        setTaskArray(taskArrayCopy)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <TaskCard  taskArray={taskArrayCopy} handler={removeTask}/>\r\n            \r\n            <div>\r\n                <form action=\"Add a new task\" className=\"createTask__form\">\r\n                    <h3>Add a new task</h3>              \r\n                    <input type=\"text\" placeholder=\"Name of task\"value={taskName} onChange={changeTaskName}/>\r\n                    <br></br>\r\n                    <input type=\"text\" placeholder=\"Additional comments\" value={taskComment} onChange={changeTaskComment}/>\r\n                    <br></br>\r\n                    <input type=\"submit\" value=\"Add task to list\" onClick={addTaskToList}/>\r\n                </form>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateTask\r\n\r\n/*setTaskArray(prevTaskArray => [...prevTaskArray, {taskName: taskName, taskComment: taskComment, index: props.followIndex}]) */\r\n\r\n/*<input type=\"submit\" value=\"Add task to list\" onClick={addTaskToList}/>*/\r\n\r\n/*setTaskArray(prevTaskArray => [...prevTaskArray, {taskName: taskName, taskComment: taskComment, index: taskIndex}])*/\r\n\r\n//let [btnValue, setBtnValue] = useState(\"-\")\r\n    //let [toggleTask, setToggleTask] = useState(true)\r\n\r\n    /*function displayTaskCreater(event){\r\n        setToggleTask(!toggleTask)\r\n        let changeClass = event.target.parentElement.querySelector(\"form\")\r\n        if(toggleTask === false){\r\n            changeClass.className = 'createTask__form'\r\n            setBtnValue(\"-\")\r\n        } else {\r\n            changeClass.className ='hideTaskCreater'\r\n            setBtnValue(\"+\")\r\n        }\r\n    } */","C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\TaskCard\\TaskCard.js",[],"C:\\Users\\ullag\\OneDrive\\Skrivebord\\git-repositories\\temaoppgave-4-advanced\\temaoppgave-4-advanced\\src\\components\\Header\\Header.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":1,"column":26,"nodeType":"47","messageId":"48","endLine":1,"endColumn":35},{"ruleId":"45","severity":1,"message":"46","line":1,"column":26,"nodeType":"47","messageId":"48","endLine":1,"endColumn":35},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]